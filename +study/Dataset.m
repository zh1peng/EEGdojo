classdef Dataset
    % DATASET A container for the EEG data structure generated by extract_epoch.
    % It provides a consistent interface to access subject-level data and metadata.

    properties (SetAccess = private)
        data        % The raw Out struct from extract_epoch
        subjects    % Cell array of subject IDs (e.g., {'01', '02', ...})
        conditions  % Cell array of all available condition names
        chanlocs    % Channel locations struct
        times       % Vector of time points for epochs
        fs          % Sampling frequency
        summary     % Summary table from Out.meta.summary
    end

    methods
        function obj = Dataset(Out)
            % DATASET Construct an instance of this class
            %   obj = study.Dataset(Out) where Out is the structure
            %   generated by study.extract_epoch.

            if ~isstruct(Out) || ~isfield(Out, 'meta')
                error('Input must be a valid Out structure with a meta field.');
            end

            obj.data = Out;

            % Extract subject IDs from the field names like 'sub_'
            fnames = fieldnames(Out);
            sub_fields = fnames(startsWith(fnames, 'sub_'));
            if isempty(sub_fields)
                warning('No subject data fields (e.g., sub_01) found in the input structure.');
                obj.subjects = {};
            else
                obj.subjects = cellfun(@(x) x(5:end), sub_fields, 'UniformOutput', false);
            end

            % Store metadata from the 'meta' field
            meta = Out.meta;
            obj.conditions = meta.conditions;
            obj.chanlocs   = meta.chanlocs;
            obj.times      = meta.times;
            obj.fs         = meta.fs;
            if isfield(meta, 'summary')
                obj.summary = meta.summary;
            else
                obj.summary = [];
            end

            fprintf('Dataset created with %d subjects.\n', numel(obj.subjects));
        end

        function data_matrix = get_data(obj, subject_id, condition_name)
            % GET_DATA Retrieve the [chan x time x trials] matrix for a
            % specific subject and condition.
            % 
            % Usage:
            %   data = ds.get_data('01', 'Standard');
            % 
            % Returns empty [] if the subject or condition is not found.

            arguments
                obj
                subject_id char
                condition_name char
            end

            data_matrix = [];
            sub_field = ['sub_' subject_id];

            if isfield(obj.data, sub_field)
                if isfield(obj.data.(sub_field), condition_name)
                    data_matrix = obj.data.(sub_field).(condition_name);
                else
                    % Return empty and warning, as some subjects might not have all conditions
                    warning('Condition %s not found for subject %s.', condition_name, subject_id);
                end
            else
                warning('Subject %s not found in dataset.', subject_id);
            end
        end

        function subject_ids = get_subjects(obj)
            % GET_SUBJECTS Returns the list of subject IDs.
            subject_ids = obj.subjects;
        end

        function condition_names = get_conditions(obj)
            % GET_CONDITIONS Returns the list of condition names.
            condition_names = obj.conditions;
        end
    end
end
